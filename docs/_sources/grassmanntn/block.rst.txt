block
========================================
.. py:class:: grassmanntn.block(data)

Create a Grassmann tensor object in the block format from `dense <densesparse.html>`_ or `sparse <densesparse.html>`_.

**Parameters:**

- **data:** `dense <densesparse.html>`_ or `sparse <densesparse.html>`_

  This is the original tensor to be converted to the block format

**Returns:**

- **out:** `block <block.html>`_

  The block version of the original tensor

Description
+++++++++++

Using `dense <densesparse.html>`_ or `sparse <densesparse.html>`_ has a certain restriction that its fermionic bond dimensions must be a power of 2. This makes it difficult to study the `Dcut`-dependence analysis of the tensor network computation. In the block format, the even and odd sectors of the coefficient tensor are separated, making it possible to use bond dimensions of any value.

To be more specific, consider the following coefficient tensor :math:`T_{I_1I_2\cdots I_n}` with shape :math:`(d_1,d_2,\cdots,d_n)`. It can be partitioned into blocks based on the parity of the Grassmann indices

.. math::

  T = \bigoplus_{\pi_1,\pi_2,\cdots,\pi_n} T^{\pi_1\pi_2\cdots\pi_n}

where :math:`\pi_i=\text{E, O}` is the parity of the :math:`i`-th axis with :math:`\text{E}` and :math:`\text{O}` being even and odd respectively. In each axis :math:`i`, the size of the even and odd sectors can be different in general, denoted respectively by :math:`d^\text{E}_i` and :math:`d^\text{O}_i`. Therefore, the shape of the block :math:`(\pi_1,\pi_2,\cdots,\pi_n)` is given by :math:`(d^{\pi_1}_1,d^{\pi_2}_2,\cdots, d^{\pi_n}_n)`.

The block format has its own encoding system so the encoder cannot be switched.

Attributes
++++++++++

- **data:** ``numpy.ndarray``

  The 'cell' array. This is the array of shape :math:`(2,\cdots,2)_n`. Each entry contains the block of the coefficient tensor with the specified axis parities. For example, ``data[0,0,1]`` contains the :math:`(\text{E, E, O})` block of the coefficient tensor.

- **statistics:** tuple of {0, 1, -1, '*'}

  A list of index statistics.

- **format:** 'standard', 'matrix'

  The coefficient format of the created tensor.

- **shape:** tuple of ``int``

  The `original` shape of the coefficient tensor. This has nothing to do with the size of the data.

- **odd_shape:** tuple of ``int``

  The dimensions of the odd sector for each axis.

- **even_shape:** tuple of ``int``

  The dimensions of the even sector for each axis.

- **effective_shape:** tuple of ``int``

  The sum of the odd and even dimensions for each axis.

- **ndim:** ``int``

  The number of axes, equals the length of `shape`.

- **norm:** ``float``

  The Frobenius norm of the coefficient tensor

Unary and binary operations
+++++++++++++++++++++++++++

- **Addition**: `<self>+<other>` and `<other>+<self>`

  Returns the sum of two Grassmann tensors. Only works if the two tensors have the same shape, statistics, format, and encoding.

- **Scalar multiplication**: `<self>*<other>` and `<other>*<self>`
  
  Returns a scalar multiplication. 

- **Subtraction**: `<self>-<other>` and `<other>-<self>`
  
  Returns the difference of two Grassmann tensors. Only works if the two tensors have the same shape, statistics, format, and encoding.

- **Unary plus**: `+<self>`
  
  Returns `<self>`

- **Negation**: `-<self>`
  
  Returns `(-1)*<self>`

Methods
+++++++

- **display(name=None, indent_size=0)**

  Display all attributes of the tensor, as well as the list of all nonzero elements.
  The tensor name (`name`) and the display indent size (`indent_size`)
  are optional.

- **info(name=None, indent_size=0)**

  The same as ``display()`` but without showing the list of all nonzero elements.

- **remove_zeros()** (for ``grassmanntn.sparse`` only)

  Remove all entries with norm less than the global parameter
  ``grassmanntn.numer_cutoff`` which has the default value of 1e-14.
  The original tensor is altered. Return nothing.

- **copy()**

  Return a deep copy of self.

- **switch_format()**

  Return a new tensor where the coefficient format is switched. The original
  tensor is not altered. Does not work if there is a hybrid index.

- **force_format(target='standard')**

  Return a new tensor where the coefficient format is forced to be `target`.
  The original tensor is not altered. Does not work if there is a hybrid index.

- **todense(encoder="canonical")**

  Convert to the `dense <densesparse.html>`_ format. Cannot be used if some legs are joined (the joined indices in the block format uses a different encoding system than the one used in dense and sparse.)---split the legs first.

- **tosparse(encoder="canonical")**

  Convert to the `sparse <densesparse.html>`_ format. Cannot be used if some legs are joined---split the legs first.

- **join_legs(*args)**

  Join tensor legs. Since the joined legs use different encoding system than the one used in dense or sparse, this function is not recommended for general use. This is mainly used in the hconjugate, svd, and eig functions.

- **split_legs(*args)**

  Split tensor legs. Since the joined legs use different encoding system than the one used in dense or sparse, this function is not recommended for general use. This is mainly used in the hconjugate, svd, and eig functions.

- **hconjugate(*args)**

  Return the Hermitian conjugate. See `here <hconjugate.html>`__.

- **svd(*args)**

  Singular value decomposition. See `here <decomposition.html>`__.
  
- **eig(*args)**

  Eigenvalue decomposition. See `here <decomposition.html>`__.
  

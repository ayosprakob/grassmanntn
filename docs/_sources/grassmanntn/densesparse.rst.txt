dense and sparse
========================================
.. py:class:: grassmanntn.dense(data, statistics=None, encoder='canonical', format='standard')
.. py:class:: grassmanntn.sparse(data, statistics=None, encoder='canonical', format='standard')

Create a Grassmann tensor object (dense or sparse) from a given initialization. `dense <densesparse.html>`__
is built upon the ``numpy.ndarray`` class from the ``numpy`` package while `sparse <densesparse.html>`__ is
built upon the ``sparse.COO`` class from the ``sparse`` package. The two objects can
be used together (agnostically) in most cases, except with the arithmetic + and - operations.

.. note::
  We recently implemented the third format for Grassmann tensor "`block <block.html>`_" which partitions the coefficient into blocks based on the parity of the indices. In this way, the computation of the signs should be faster in a large contraction. This also allows the bond dimension to be any integer instead of a power of two.

**Parameters:**

- **data:** `nested list`, ``numpy.ndarray``, ``sparse.COO``, `dense <densesparse.html>`__, or `sparse <densesparse.html>`__

  This is the data object of the coefficient tensor.

- **statistics:** list or tuple of { 0, 1, -1, '*' }

  A list of index statistics. The statistics are either +1 for a fermion, -1 for
  a conjugated fermion, 0 for a boson, or '*' for a hybrid index.
  If `data` is `dense <densesparse.html>`__ or `sparse <densesparse.html>`__, this parameter is overwritten
  by `statistics`.

- **encoder:** 'canonical' (default), 'parity-preserving'

  The encoding function of the initialized coefficient tensor.
  If `data` is `dense <densesparse.html>`__ or `sparse <densesparse.html>`__, this parameter is overwritten
  by `encoder`.

- **format:** 'standard' (default), 'matrix'

  The coefficient format of the initialized coefficient tensor.
  If `data` is `dense <densesparse.html>`__ or `sparse <densesparse.html>`__, this parameter is overwritten
  by `format`.

**Returns:**

- **out:** `dense <densesparse.html>`__ or `sparse <densesparse.html>`__

  A Grassmann tensor object satisfying the specified requirements.

Description
+++++++++++

Every Grassmann tensor

.. math::

    \mathcal{T}_{\psi_1\cdots\psi_m\bar\phi_1\cdots\bar\phi_n}=\sum_{I_1,\cdots, I_m,J_1,\cdots,J_n}T_{I_1\cdots I_mJ_1\cdots J_n}\psi_1^{I_1}\cdots\psi_m^{I_m}\bar\phi_1^{J_1}\cdots\bar\phi_n^{J_n}

contains 4 kinds of information: the numerical coefficient tensor :math:`T`, the statistics of the indices, the index encoding method, and the coefficient format.

Statistics refers to the type of index which can be: +1 for a non-conjugate fermionic index, -1 for a conjugated index, 0 for a bosonic index, and '*' for a *hybrid* index.

.. note::
  The conjugate operator :math:`\bar\psi` in this package is **not** the same as the creation operator :math:`\psi^\dagger` but they are related via the sign factor :math:`\bar\psi^I=\sigma_I\psi^{\dagger I}`. To enter the tensor elements in the creation-annihilation operator basis, create the tensor with the option *format='matrix'*.


.. note::
  Hybrid indices are essential in the algorithms but are not intended to be used by the user.

Index encoder refers to how the composite index :math:`I=(i_1,\cdots,i_n)` is encoded as an integer. There are two options: *canonical* and the *parity-preserving* encoders;

.. math::

    I_\text{canonical}(i_1,\cdots,i_n)&=\sum_{k=1}^n2^{k-1}i_k,
    \\
    I_\text{parity-preserving}(i_1,\cdots,i_n)&=
    \left\{
    \begin{array}{ll}
    \displaystyle
    \sum_{k=1}^n2^{k-1}i_k&
    \displaystyle
    ;i_2+\cdots +i_n\;\text{even},\\
    \displaystyle
    1-i_1+\sum_{k=2}^n2^{k-1}i_k&
    \displaystyle
    ;i_2+\cdots +i_n\;\text{odd}.
    \end{array}
    \right.

The canonical encoder has the advantage that it is easy to join and split indices. For example, if :math:`I` and :math:`J` corresponds to the canonical indices of an :math:`m`-bit fermion and an :math:`n`-bit fermion, respectively, then :math:`I` and :math:`J` can be joined with

.. math::

    K=I+2^mJ\quad(\text{with canonical encoder}),

which corresponds to :math:`(i_1,\cdots,i_m,j_1,\cdots,j_n)` in the bit representation. The parity-preserving encoder, as the name suggests, is designed in a way that the Grassmann parity of the index is readily manifested. Namely, if :math:`I` is a parity-preserving index corresponds to :math:`(i_1,\cdots,i_n)` in the bit representation, then we have

.. math::

    I\equiv \sum_{a=1}^ni_a\;(\text{mod}\;2)\quad(\text{with parity-preserving encoder}).

The two encoders can be switched by the switching function

.. math::

    \varepsilon(I_\text{canonical})=\varepsilon^{-1}(I_\text{canonical})=I_\text{parity-preserving},

which is self-inverse.

And finally, the coefficient format refers to whether the coefficient tensor is in the *standard* or the *matrix format*.

Examples
++++++++

To make a random dense Grassmann tensor :math:`\mathcal{T}_{\psi\bar\phi\bar\zeta mn}` where :math:`m` and :math:`n` are bosonic indices with dimensions :math:`d_\psi=d_\phi=4`, :math:`d_\zeta=8`, and :math:`d_m=d_n=5`, the following command is used

.. code-block:: python

	>>> import numpy as np
	>>> import grassmanntn as gtn
	>>> T_data = np.random.rand(4,4,8,5,5) # a random coeff with the specified
	>>>                                    # shape.
	>>> T_statistics = (1,-1,-1,0,0)       # the statistics of the indices.
	>>> T = gtn.dense(  data=T_data, statistics=T_statistics,
	...                 encoder="canonical", format="standard")

Alternatively, the ``grassmanntn.random()`` function can also be used instead

.. code-block:: python

	>>> T = gtn.random( shape=(4,4,8,5,5), statistics=(1,-1,-1,0,0),
	...                 tensor_type=gtn.dense, dtype=float,
	...                 encoder="canonical", format="standard",
	...                 skip_trimming=True) # If False (default), 
	...                                     # the Grassmann-odd components
	>>>                                     # are removed.

Sparse Grassmann tensor can also be initialized in the COO (coordinate list) format if a list of non-zero entries is specified. For example, if one wants to initialize the following tensor (canonical and standard):

.. math::

    \mathcal{T}_{\bar\psi\phi} = 3.1 \bar\psi^3\phi^5 + (7.9+2.3i) \bar\psi^2\phi^7 + 5.8\bar\psi^0\phi^1 -0.2i\bar\psi^2\phi^2

where :math:`\bar\psi` and :math:`\phi` are 2- and 3-bit fermions (:math:`d_\psi=4` and :math:`d_\phi=8`), respectively, then we write

.. code-block:: python

	>>> import sparse as sp
	>>> cI = complex(0,1)
	>>> T_shape = (4,8)
	>>> T_statistics = (-1,1)
	>>> psi_bar = [3, 2, 0, 2]                    #psi_bar's index
	>>> phi     = [5, 7, 1, 2]                    #phi's index
	>>> coords  = [psi_bar,phi]
	>>> coeff   = [3.1, 7.9+2.3*cI, 5.8, -0.2*cI] #the coefficients
	>>> T_data = sp.COO(coords,coeff,shape=T_shape)
	>>> T = gtn.sparse( data=T_data, statistics=T_statistics,
	...                 encoder="canonical", format="standard")

The two formats can be easily converted with

.. code-block:: python

	>>> T_sparse = gtn.sparse(T_dense) # from dense to sparse
	>>> T_dense  = gtn.dense(T_sparse) # from sparse to dense


Attributes
++++++++++

- **data:** ``numpy.ndarray`` for `dense <densesparse.html>`__, ``sparse.COO`` for `sparse <densesparse.html>`__

  The coefficient tensor.

- **statistics:** tuple of {0, 1, -1, '*'}

  A list of index statistics.

- **encoder:** 'canonical', 'parity-preserving'

  The encoding function of the created tensor.

- **format:** 'standard', 'matrix'

  The coefficient format of the created tensor.

- **shape:** tuple of ``int``

  A list of index dimensions of the created Grassmann tensor.

- **size:** ``int``

  The number of all elements (including zeros), equals the product of dimensions.

- **ndim:** ``int``

  The number of axes, equals the length of `shape`.

- **nnz:** ``int``

  The number of nonzero elements. Nonzero elements are defined to be elements with norms larger than the parameter
  ``grassmanntn.numer_display_cutoff`` which has the default value of 1e-11.
  Note that this *does not* mean that elements with smaller norms are eliminated.

- **norm:** ``float``

  The Frobenius norm of the coefficient tensor

Unary and binary operations
+++++++++++++++++++++++++++

- **Addition**: `<self>+<other>` and `<other>+<self>`

  Returns the sum of two Grassmann tensors. Only works if the two tensors have the same shape, statistics, format, and encoding.

- **Scalar multiplication**: `<self>*<other>` and `<other>*<self>`
  
  Returns a scalar multiplication. 

- **Subtraction**: `<self>-<other>` and `<other>-<self>`
  
  Returns the difference of two Grassmann tensors. Only works if the two tensors have the same shape, statistics, format, and encoding.

- **Unary plus**: `+<self>`
  
  Returns `<self>`

- **Negation**: `-<self>`
  
  Returns `(-1)*<self>`

Methods
+++++++

- **display(name=None, indent_size=0)**

  Display all attributes of the tensor, as well as the list of all nonzero elements.
  The tensor name (`name`) and the display indent size (`indent_size`)
  are optional.

- **info(name=None, indent_size=0)**

  The same as ``display()`` but without showing the list of all nonzero elements.

- **remove_zeros()** (for ``grassmanntn.sparse`` only)

  Remove all entries with norm less than the global parameter
  ``grassmanntn.numer_cutoff`` which has the default value of 1e-14.
  The original tensor is altered. Return nothing.

- **copy()**

  Return a deep copy of self.

- **switch_encoder()**

  Return a new tensor where the encoding function is switched. The original
  tensor is not altered. Does not work if there is a hybrid index.

- **force_encoder(target='canonical')**

  Return a new tensor where the encoding function is forced to be `target`.
  The original tensor is not altered. Does not work if there is a hybrid index.

- **switch_format()**

  Return a new tensor where the coefficient format is switched. The original
  tensor is not altered. Does not work if there is a hybrid index.

- **force_format(target='standard')**

  Return a new tensor where the coefficient format is forced to be `target`.
  The original tensor is not altered. Does not work if there is a hybrid index.

- **toblock()**

  Return the `block <block.html>`_ format of self.

- **join_legs(*args)**

  Join tensor legs. Return the result.
  The original tensor is not altered.
  Using this method is the same as using the function ``join_legs(self,*args)``. See `here <joinsplit.html>`__.

- **split_legs(*args)**

  Split tensor legs. Return the result.
  The original tensor is not altered.
  Using this method is the same as using the function ``split_legs(self,*args)``. See `here <joinsplit.html>`__.

- **hconjugate(*args)**

  Return the Hermitian conjugate. The original tensor is not altered.
  Using this method is the same as using the function ``hconjugate(self,*args)``. See `here <hconjugate.html>`__.

- **svd(*args)**

  Singular value decomposition. Return the tuple :math:`\mathcal U`, :math:`\Sigma`, :math:`\mathcal V`.
  Using this method is the same as using the function ``svd(self,*args)``. See `here <decomposition.html>`__.
  
- **eig(*args)**

  Eigenvalue decomposition. Return the tuple :math:`\mathcal U`, :math:`\Sigma`, :math:`\mathcal U^\dagger`. The tensor must be
  Hermitian for this to work correctly. Otherwise, use ``svd()`` instead.
  Using this method is the same as using the function ``eig(self,*args)``. See `here <decomposition.html>`__.
  

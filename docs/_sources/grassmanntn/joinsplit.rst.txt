join_legs() and split_legs()
========================================

.. py:function:: grassmanntn.join_legs(object, subscripts, make_format='standard', intermediate_stat=None )
.. py:function:: grassmanntn.split_legs(object, subscripts, final_stat, final_shape, intermediate_stat=None )

Join and split the tensor legs. The algebraic properties of the legs are preserved.

.. note::
	There are many subtleties about `join_legs() <joinsplit.html>`_ and `split_legs() <joinsplit.html>`_, especially if one wants to join fermionic and bosonic legs into a hybrid leg (see the description below). Consider using the `hybrid isometries` instead as the hybrid leg in that case is a proper representation of Grassmann algebra, which is preferable.
	

**Parameters:**

- **object:** `Grassmann tensor <densesparse.html>`_

  The object to be operated on.

- **subscripts:** ``str``

  Specify how the indices are joined or split. See below for more explanation.

- **make_format:** {'standard' (default), 'matrix'} (for `join_legs() <joinsplit.html>`_ only)

  Specify the coefficient format of the final tensor.

- **final_stat:** list or tuple of {0, 1, -1, '*'} (for `split_legs() <joinsplit.html>`_ only)

  Specify the statistics of the final tensor.

- **final_shape:** list or tuple of ``int`` (for `split_legs() <joinsplit.html>`_ only)

  Specify the shape of the final tensor.

- **intermediate_stat:** list or tuple of {1, -1}

  Specify the statistics of fermionic indices before joining/after splitting the fermions with the boson (if any). If there are no bosonic indices involved, this should be used as the final statistics for `join_legs() <joinsplit.html>`_ and should be the same as the initial statistics for `split_legs() <joinsplit.html>`_. See the algorithm below for more explanation.

**Returns:**

- **out:** `Grassmann tensor <densesparse.html>`_

  The Grassmann tensor after joining/splitting the legs.

Description
+++++++++++

These functions are used to join and split the legs of a Grassmann tensor. They are intended to serve the same function as ``numpy.reshape()``. However, since joining the legs in cases of Grassmann tensors requires more information than just the final tensor's shape, these two functions are created.

The subscripts tell the program how the legs are grouped. There are two notations:

* Parenthesis notation: For `join_legs() <joinsplit.html>`_, the indices in the parenthesis are joined into one leg. For `split_legs() <joinsplit.html>`_, the original leg, represented by the whole parenthesis, is split into smaller legs represented by the indices inside the parenthesis. Indices outside of the parentheses are not affected.

* Separator notation: The leg grouping is separated by one of the following indicators: vertical bar ``|``, colon ``:``, semicolon ``;``, comma ``,``, and dot ``.``. This is equivalent to enclosing the whole `subscripts` inside a parenthesis and replacing each of the indicators by ``)(``.

The two notations should not be mixed to avoid unintended results. Greek characters and numbered indices are also supported.

The complication of the joining and splitting processes comes when there are bosonic indices involved. Namely, if we combine an :math:`n`-bit fermionic index :math:`I` with a bosonic index :math:`i` as a hybrid index :math:`X = I + 2^n i`, the fermionic structure is now completely lost. It is impossible to switch the coefficient format and encoder with *X* as a sole input. Yet, joining a fermion with a boson is still unavoidable if one wants to perform the singular value decomposition where the tensor involves both the fermion and the boson. The aim of `join_legs() <joinsplit.html>`_ and `split_legs() <joinsplit.html>`_ is to perform such a task and still let the user keep control of the fermionic structure.

In case there are both bosons and fermions in a grouping

.. math::

	(I_1\cdots I_m J_1\cdots J_n i_1\cdots i_p),

where :math:`I_a` and :math:`J_b` are associated with :math:`\psi_a^{I_a}` and :math:`\bar\phi_b^{J_b}`, respectively, the fermions are joined into a single fermion first according to the prescription:

.. math::

	(I_1 \cdots I_m J_1 \cdots J_n i_1 \cdots i_p) \rightarrow (K i_1 \cdots i_p).

The option ``intermediate_stat`` allows the user to specify the statistics of these intermediate fermions. Since the user cannot switch the coefficient format with a hybrid index, `join_legs() <joinsplit.html>`_ gives the option to switch the format at this point via the argument ``make_format = 'matrix'``. Note that switching the format before and after joining the fermions gives different results. After this, all the indices are joined into a single index with the hybrid statistics ``*``:

.. math::

	(K i_1 \cdots i_p) \rightarrow X.

To keep the information about the Grassmann parity of the fermions in the hybrid index, the joined fermionic index :math:`K` must be switched into the parity-preserving encoder first so that the hybrid index :math:`X = K + 2^n k` (:math:`k` is the joined bosonic index) has the same parity as :math:`K`. Since the function `switch_encoder() <densesparse.html#methods>`_ and `switch_format() <densesparse.html#methods>`_ do not work with tensors with hybrid indices, they are always in the parity-preserving format.

The `split_legs() <joinsplit.html>`_ function works in the opposite order of `join_legs() <joinsplit.html>`_. The user still needs to specify the `intermediate_stat` of the fermionic index :math:`K` after the first split :math:`X \mapsto (K i_1 \cdots i_p)`. After that, the arguments `final_stat` and `final_shape` are needed to perform the final fermion splitting.

To summarize, these are the options for `join_legs() <joinsplit.html>`_ that the user needs to specify in commonly occurring cases:

* All the indices are fermionic:

  Specify the final statistics with `intermediate_stat`. The format and the encoder can be switched later since there is no hybrid index in the final tensor.

* Turning the tensor into a Grassmann matrix in the matrix format where one or both of the indices are hybrid:

  Set ``intermediate_stat = (-1, 1)`` and ``make_format = 'matrix'``. This option is used in the conjugation and tensor decomposition.

Examples
++++++++

.. code-block:: python

	>>> import grassmanntn as gtn
	>>> A = gtn.random(shape=(4,4,4,4),statistics=(1,1,-1,-1))
	>>> A.info ("A")

            name: A
      array type: dense
           shape: (4, 4, 4, 4)
         density: 128 / 256 ~ 50.0 %
      statistics: (1, 1, -1, -1)
          format: standard
         encoder: canonical
          memory: 2.195 KiB
            norm: 6.8893569485959105

Join the legs into two groups with the final statistics of ``(1,-1)``:

.. code-block:: python

	>>> M = A.join_legs('(ij)(kl)',intermediate_stat=(1,-1))
	>>> M.info("M")

            name: M
      array type: dense
           shape: (16, 16)
         density: 128 / 256 ~ 50.0 %
      statistics: (1, -1)
          format: standard
         encoder: parity-preserving
          memory: 168 B
            norm: 6.8893569485959105

Splitting the legs of this tensor gives the original tensor:

.. code-block:: python

	>>> B = M.split_legs('(ij)(kl)',intermediate_stat=(1,-1),
	...                 final_stat=(1,1,-1,-1),final_shape=(4,4,4,4))
	>>> B.info("B")

            name: B
      array type: dense
           shape: (4, 4, 4, 4)
         density: 128 / 256 ~ 50.0 %
      statistics: (1, 1, -1, -1)
          format: standard
         encoder: canonical
          memory: 2.195 KiB
            norm: 6.8893569485959105
			
	>>> print((A-B).norm) # is equal to zero if A=B
	0.0

An example of a tensor with hybrid indices:

.. code-block:: python

	>>> C = gtn.random(shape=(4,2,3),statistics=(1,-1,0))
	>>> M = C.join_legs('i,jk',intermediate_stat=(-1,1))
	>>> M.info("M")

            name: M
      array type: dense
           shape: (4, 6)
         density: 12 / 24 ~ 50.0 %
      statistics: (-1, '*')
          format: standard
         encoder: parity-preserving
          memory: 168 B
            norm: 1.824428488802565
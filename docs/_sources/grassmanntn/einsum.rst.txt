einsum()
========================================

.. py:function:: grassmanntn.einsum(subscripts, *operands)

Perform the Grassmann tensor contraction of the operands in the Einstein summation notation, where each pair of indices with the same character are contracted.

**Parameters:**

- **subscripts:** ``str``

  Specify the subscripts of the operands, each separated by a comma indicator ``,``, in the Einstein summation notation. Unless it is a complete summation, the subscript of the result *must be specified* after the indicator ``->``. See the note below for the acceptable subscripts.

- **operands:** `Grassmann tensors <densesparse.html>`_

  Grassmann tensors (`dense <densesparse.html>`_ or `sparse <densesparse.html>`_ types) in the same order as specified in `subscripts`. Each operand can be of different types, but they will be converted to the same type as the first operand.


**Returns:**

- **out** (*scalar* or *grassmann_tensor*):  
  The result of the contraction with the same object type as the first operand. If it is a complete contraction, the function returns a scalar (``float``, or ``complex``).


Description
+++++++++++

The function `einsum <einsum.html>`_ aims to simplify the calculation of Grassmann tensor contraction. The argument `subscripts`, which is a list of indices of each operand separated by commas, tells the program which pair of indices are to be contracted, as well as the arrangement of the resulting object's indices. For example, the contraction

.. math::

    \mathcal{C}_{\psi_1\bar\psi_2\bar\psi_3}
    =\int_{\bar\phi\phi}\mathcal{A}_{\psi_1\phi\bar\psi_3}\mathcal{B}_{\bar\psi_2\bar\phi}

is represented by the subscripts ``'ilk,jl->ijk'`` where ``i``, ``j``, ``k``, and ``l`` represent :math:`\psi_1`, :math:`\psi_2`, :math:`\psi_3`, and :math:`\phi`, respectively. There is no ambiguity about the conjugacy of the indices since it is already specified by the attribute `statistics` of each operand. The fermion :math:`\phi` is contracted, so the symbol ``l`` comes in a pair in the subscripts. Available characters for the indices include Latin characters ``a-z`` and ``A-Z``, as well as Greek characters ``α-Ω``. It is also possible to use numbered indices by adding a number (of any length) after a character. For example, the string ``'i1ai3,i2a->i1i2i3'`` is equivalent to ``'ilk,jl->ijk'``. Spaces can also be placed anywhere to improve readability; e.g. ``'i1 a i3, i2 a -> i1 i2 i3'``. The function `einsum <einsum.html>`_ only supports up to 86 unique indices (including the numbered indices) in one operation.

Algorithm
+++++++++

The Grassmann tensor contraction differs from the usual contraction in that we have to include the sign factor tensor in the summation. For example, the contraction

.. math::

    \mathcal{C}_{\psi_1\bar\psi_2\bar\psi_3}
    =\int_{\bar\phi\phi}\mathcal{A}_{\psi_1\phi\bar\psi_3}\mathcal{B}_{\bar\psi_2\bar\phi}
	
is equivalent to the sum

.. math::

    C_{IJK}=\sum_{J,K,L}A_{ILK}B_{JL}s_{JKL}

of the coefficient tensor, where

.. math::

    s_{JKL}=(-)^{p(L)(p(J)+p(K))+p(J)p(K)}\sigma_L

is the sign factor tensor. Thus, the task is to compute the sign tensor from a given `subscripts` string and operands' `statistics`.

The sign factor tensor is computed in three steps: pre-contraction :math:`s_1`, mid-contraction :math:`s_2`, and post-contraction step :math:`s_3`. The pre-contraction tensor comes from the permutation of the fermions so that, for each pair of fermions to be contracted, the conjugated fermion is moved to the right of the non-conjugated counterpart. For example,

.. math::

    \psi_1^I{\color{Magenta}\phi^L}\bar\psi_3^K\;\bar\psi_2^J{\color{Magenta}\bar\phi^L}
    \;\rightarrow\;
    \psi_1^I{\color{Magenta}\phi^L\bar\phi^L}\bar\psi_3^K\bar\psi_2^J\times (-)^{p(L)(p(J)+p(K))}

gives

.. math::

    (s_1)_{JKL} = (-)^{p(L)(p(J)+p(K))}.

For each pair of contracted fermions, we have to include another set of contraction sign factors :math:`\sigma_I` (see the `preprint <https://arxiv.org/abs/2309.07557>`_); e.g.,

.. math::

    \psi_1^I{\color{Magenta}\phi^L\bar\phi^L}\bar\psi_3^K\bar\psi_2^J
    \;\rightarrow\;
    \psi_1^I\bar\psi_3^K\bar\psi_2^J\times \sigma_L

gives

.. math::

    (s_2)_{L} = \sigma_L.

And finally, the post-contraction step, which is the permutation of the fermions into the form specified in `subscripts`, gives another sign factor; e.g.,

.. math::

    \psi_1^I{\color{Magenta}\bar\psi_3^K\bar\psi_2^J}
    \;\rightarrow\;
    \psi_1^I{\color{Magenta}\bar\psi_2^J\bar\psi_3^K}\times (-)^{p(J)p(K)}

gives

.. math::

    (s_3)_{JK} = (-)^{p(J)p(K)}.

The three sign factors are then combined as

.. math::

    s_{JKL} = (s_1)_{JKL}(s_2)_{L}(s_3)_{JK},

which is then used to perform the contraction.

Examples
++++++++

.. code-block:: python
	
	>>> import grassmanntn as gtn
	>>> A = gtn.random(shape=(4,4,8),statistics=(1,1,-1))
	>>> B = gtn.random(shape=(16,4),statistics=(-1,-1))
	>>> C = gtn.einsum('ilk,jl->ijk',A,B) # Contraction between A and B.
	>>> C.info("C") # Show basic information.

            name: C
      array type: dense
           shape: (4, 16, 8)
         density: 256 / 512 ~ 50.0 %
      statistics: (1, -1, -1)
          format: standard
         encoder: canonical
          memory: 4.18 KiB
            norm: 8.477345182714446

The `einsum <einsum.html>`_ function can be used to take the tensor trace:

.. code-block:: python
	
	>>> T = gtn.random(shape=(4,4,4,4),statistics=(1,1,-1,-1))
	>>> trT = gtn.einsum('ijij',T)
	>>> print(trT)
	-1.506277867139303

To take the trace with anti-periodic boundary conditions, the sign factor must be applied to the coefficient manually:

.. code-block:: python
	
	>>> import numpy as np
	>>> from grassmanntn.param import gparity
	>>> dimt = T.shape[1] # Size of the anti-periodic leg
	>>> S=[(-1)**gparity(i) for i in range(dimt)] # Anti-periodic sign factor
	>>> T.data = np.einsum('ijkl,j->ijkl',T.data,S) #<== This is numpy.einsum!
	>>> trT = gtn.einsum('ijij',T)
	>>> print(trT) #Should be different from the periodic trace
	1.571951156790323


It can also be used to swap the indices:

.. code-block:: python
	
	>>> C2 = gtn.einsum('ijk->jki',C)
	>>> C2.info("C2")

            name: C2
      array type: dense
           shape: (16, 8, 4)
         density: 256 / 512 ~ 50.0 %
      statistics: (-1, -1, 1)
          format: standard
         encoder: canonical
          memory: 4.18 KiB
            norm: 8.477345182714446

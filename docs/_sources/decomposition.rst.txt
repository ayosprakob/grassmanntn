svd() and eig()
========================================

.. py:function:: grassmanntn.svd(object, subscripts, cutoff=None )
.. py:function:: grassmanntn.eig(object, subscripts, cutoff=None )

Performing singular value decomposition and eigenvalue decomposition.

**Parameters:**

- **object:** *grassmann_tensor*

  The object to be operated on. For ``eig()``, the object must be Hermitian for the function to work as intended.

- **subscripts:** ``str``

  Specify how the indices are grouped as a matrix. See `here <joinsplit.html#description>`__ for the grouping rules.

- **cutoff:** ```int``` (optional)

  Specify the truncation size (number of singular/eigenvalues kept) of the tensor decomposition.

**Returns:**

- **out:** :math:`\mathcal{U}`, :math:`\Sigma`, :math:`\mathcal{V}`

  For ``eig()``, the tensor :math:`\mathcal{V}` is equal to :math:`\mathcal{U}^\dagger`. The positively-definite spectrum vector :math:`\lambda_I` can be obtained from the matrix diagonal of :math:`\Sigma`; ``λ=grassmanntn.diag(Σ.force_format("matrix"))``.

Description
+++++++++++

The Grassmann tensor is first reshaped into a matrix in the matrix format and parity-preserving encoder using ``join_legs()``. If the tensor is Grassmann even, the coefficient matrix (in the matrix format) :math:`M^\text{(m)}` can be diagonalized into two blocks associated with the even-even and odd-odd indices

.. math::

    M^\text{E}_{I,J}=M^\text{(m)}_{2I,2J},\quad M^\text{O}_{I,J}=M^\text{(m)}_{2I+1,2J+1}.

These two blocks are decomposed separately:

.. math::

    M^\text{E}_{I,J} &= \sum_KU^\text{E}_{I,K}\lambda^\text{E}_K V^\text{E}_{K,J},\\
    M^\text{O}_{I,J} &= \sum_KU^\text{O}_{I,K}\lambda^\text{O}_K V^\text{O}_{K,J}.

These matrices are then reconstructed into a full matrix:

.. math::

    U^\text{(m)}_{2I,2J} &= U^\text{E}_{I,J},\qquad U^\text{(m)}_{2I+1,2J+1} = U^\text{O}_{I,J},\\
    \Sigma^\text{(m)}_{2I,2J} &= \lambda^\text{E}_{I}\delta_{I,J},\quad\Sigma^\text{(m)}_{2I+1,2J+1} = \lambda^\text{O}_{I}\delta_{I,J},\\
    V^\text{(m)}_{2I,2J} &= V^\text{E}_{I,J},\qquad V^\text{(m)}_{2I+1,2J+1} = V^\text{O}_{I,J}.

The legs on the unitary matrices are then split again with ``split_legs()``.

It is important to note that, similarly to the original tensor, both the unitary matrices and the singular value matrices are also diagonalizable into the even and odd blocks. This means that they are all Grassmann even. As a result, the decomposed tensors can be moved around in the expression without introducing a new sign factor.

If the input tensor is Hermitian, eigenvalue decomposition can be obtained from the singular value decomposition via

.. math::

    M^\text{(m)} = U^\text{(m)}\Sigma^\text{(m)} V^\text{(m)} = U^\text{(m)}\underset{\displaystyle {\Sigma'}^\text{(m)}}{\underbrace{(\Sigma^\text{(m)} V^\text{(m)}U^\text{(m)})}}(U^\text{(m)})^\dagger

If the input tensor is not Hermitian, :math:`{\Sigma'}^\text{(m)}` will not be diagonal, and the relation will not reproduce a correct eigenvalue decomposition.

Examples
++++++++

Singular value decomposition of a three-legged tensor:

.. code-block:: python

	>>> import grassmanntn as gtn
	>>> A  = gtn.random(shape=(4,4,4),statistics=(1,1,-1))
	>>> U, Σ, V = A.svd('i|jk')
	>>> UΣV = gtn.einsum('ia,ab,bjk->ijk',U,Σ,V) #Reconstruct the original tensor
	>>> print( (A-UΣV).norm ) # vanishes if A=UΣV
	7.557702638948695e-16

Forming a Hermitian tensor:

.. code-block:: python

	>>> H = gtn.einsum('jki,iJK->jkJK',A.hconjugate('i|jk'),A)

Eigenvalue decomposition:

.. code-block:: python

	>>> U, Σ, V = H.eig('jk|JK')
	>>> print((U-V.hconjugate('a|JK')).norm) # is zero if U is V-conjugate
	0.0
	>>> UΣV = gtn.einsum('jka,ab,bJK->jkJK',U,Σ,V)
	>>> print( (H-UΣV).norm ) # vanishes if H=UΣV
	9.177321373036202e-15
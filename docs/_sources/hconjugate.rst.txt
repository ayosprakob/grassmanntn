hconjugate()
========================================

.. py:function:: grassmanntn.hconjugate(object, subscripts)

Performing Hermitian conjugation.


**Parameters:**

- **object:** *grassmann_tensor*

  The object to be operated on.

- **subscripts:** ``str``

  Specify how the indices are grouped as a matrix. See `here <joinsplit.html#description>`__ for the grouping rules.

**Returns:**

- **out:** *grassmann_tensor* (``grassmanntn.dense`` or ``grassmanntn.sparse``)

  The conjugated Grassmann tensor.

Description
+++++++++++

Hermitian conjugation of a Grassmann tensor is defined only for a Grassmann matrix; i.e., a two-legged tensor. Namely, for a Grassmann matrix

.. math::

	\mathcal{M}_{\bar\psi\phi}=\sum_{I,J}M_{IJ}\bar\psi^I\phi^J,

its Hermitian conjugate is given by

.. math::

	\mathcal{M}^\dagger_{\bar\psi\phi}&:=\sum_{I,J}M^*_{JI}\sigma_I\sigma_J\bar\psi^I\phi^J,\\
	\sigma_I&:=\prod_{a<b}(-)^{i_ai_b}.


For a general tensor, ``hconjugate()`` first reshaped the tensor into a matrix using ``join_legs()``. The argument ``subscripts`` is passed along at this step to specify how the tensor should be reshaped. After performing the conjugation, the legs are then split back using ``split_legs()``.

Examples
++++++++

.. code-block:: python

	>>> import grassmanntn as gtn
	>>> A  = gtn.random(shape=(4,4,4),statistics=(1,1,-1))


The conjugate :math:`(\mathcal{A}_{(\psi)(\phi\bar\zeta)})^\dagger=\mathcal{A}^\dagger_{(\bar\phi\zeta)(\bar\psi)}`:

.. code-block:: python

	>>> cA = A.hconjugate('i|jk')
	>>> cA.info('A-conjugate') 

            name: A-conjugate
      array type: dense
           shape: (4, 4, 4)
         density: 32 / 64 ~ 50.0 %
      statistics: (-1, 1, -1)
          format: standard
         encoder: canonical
          memory: 696 B
            norm: 3.3059103254728464
		

Forming a Hermitian matrix:

.. code-block:: python

	>>> H = gtn.einsum('i jk, jk I -> iI',A,cA) # a Hermitian matrix
	>>> cH = H.hconjugate('i|I')
	>>> print( (H-cH).norm ) # is equal to zero if H is Hermitian
	0.0
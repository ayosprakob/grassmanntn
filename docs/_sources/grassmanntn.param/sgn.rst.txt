sgn()
========================================

.. py:function:: grassmanntn.param.sgn(canonical_index)

Returns the contraction sign factor :math:`\sigma_I` for a given canonical index :math:`I`.


**Parameters:**

- **canonical_index:** ``int``

  The composite index :math:`I` in the canonical encoder.

**Returns:**

- **out:** ``int``

  The sign factor :math:`\sigma_I`.

Description
+++++++++++

This sign factor appears everytime we perform a contraction. It originates from the orthogonality relation

.. math::

  \int_{\bar\psi\psi}\psi^I\bar\psi^J\equiv \int d\bar\psi d\psi e^{-\bar\psi\cdot\psi} \psi^I\bar\psi^J =\delta_{IJ}\sigma_I.

For :math:`I=(i_1,\cdots,i_n)`, :math:`\sigma_I` is defined by

.. math::

  \sigma_I\equiv\prod_{1\leq a<b\leq n} (-)^{i_ai_b}.

However, it can be shown that :math:`\sigma_I` can also be written as

.. math::

  \sigma_I=(-)^{\frac{1}{2}p(I)(p(I)-1)},

which is the form we use in our code.

Proof for the equivalence
-------------------------
First note that :math:`\sigma_I=(-)^{q(I)}` where

.. math::

  q(I)\equiv\sum_{1\leq a<b\leq n}i_ai_b.

The function :math:`q(I)` counts the number of distinct pairs of any two bits in :math:`I` with nonzero occupation number. Let :math:`p(I)` be the number of bits with nonzero occupation number (which happens to be the `gparity <gparity.html>`__ function.). Then we have

.. math::

  q(I)=\frac{1}{2}p(I)(p(I)-1).

QED